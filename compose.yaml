services:
  db:
    image: postgres:15
    container_name: transactions-storage-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  redis:
    container_name: transactions-storage-redis
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - app-network

  backend:
    container_name: transactions-storage-backend
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - DB_HOST=db
      - REDIS_HOST=redis
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      migrations:
        condition: service_started
    networks:
      - app-network

  celery:
    container_name: transactions-storage-celery
    build:
      context: .
      dockerfile: celery_app/Dockerfile
    environment:
      - DB_HOST=db
      - REDIS_HOST=redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      migrations:
        condition: service_started
    networks:
      - app-network

  migrations:
    container_name: transactions-storage-migrations
    build:
      context: .
      dockerfile: alembic/Dockerfile
    environment:
      - DB_HOST=db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

volumes:
  postgres_data:


networks:
  app-network:
    driver: bridge
